---
import { formatCurrency } from "../../../utils/intl";
import Layout from "../../../layouts/Layout.astro";
import { isInPast, months } from "../../../utils/date";
import { getPercentage } from "../../../utils/calculation";
import type { DividendsMonthly, PortfolioDetailResponse } from "../../../types";
import { getLogoUrl } from "../../../utils/logos";

const { id } = Astro.params;

const SOURCE_TAX = 0.85;
const EXCHANGE_RATE = 0.91;

const {
  data: {
    id: portfolioId,
    name,
    stocks,
    funds,
    stocksStatus,
    fundsStatus,
    orders,
  },
} = (await (
  await fetch(`${import.meta.env.VITE_URL_BASE}/api/portfolio/${id}/detail`)
).json()) as PortfolioDetailResponse;

const dividendTimeline = [];
const today = new Date();
const year = today.getUTCFullYear();
const currentMonth = today.getMonth() + 1;

for (let i = currentMonth; i <= 12; i++) {
  const timelineMonth: {
    year: number;
    month: number;
    dividendsOfMonth: DividendsMonthly;
    totalPayout: number;
  } = {
    year,
    month: i,
    dividendsOfMonth: [],
    totalPayout: 0,
  };

  const dividendsOfMonth = stocks
    .map((s) => {
      return s.dividends_stock
        .filter((d) => {
          return d.payment_date_iso.includes(
            `${year}-${i.toString().padStart(2, "0")}`
          );
        })
        .map((d) => {
          const validOrdersOfStock = orders
            .filter((order) => order.isin === s.isin)
            .filter((order) => order.timestamp < d.ex_date_unix);

          const ownedAtPayout = validOrdersOfStock.reduce((acc, order) => {
            acc += order.amount_changed;
            return acc;
          }, 0);

          const stockInfo = stocksStatus.find(
            (status) => status.isin === d.isin
          );

          return {
            ...d,
            amountPayout: d.amount * ownedAtPayout * SOURCE_TAX * EXCHANGE_RATE,
            instrumentInfo: stockInfo,
            ownedAtPayout,
          };
        });
    })
    .flat();

  const fundDividends =
    funds
      .map((f) => {
        return f.dividends_fund
          .filter((d) => {
            return d.payment_date_iso.includes(
              `${year}-${i.toString().padStart(2, "0")}`
            );
          })
          .map((d) => {
            const validOrdersOfFund = orders
              .filter((order) => order.isin === f.isin)
              .filter((order) => {
                if (order.timestamp > d.ex_date_unix) {
                  console.log(
                    "possibly exclude order: ",
                    order,
                    new Date(order.timestamp).toLocaleDateString()
                  );
                  console.log("ex date: ", d.ex_date_iso);
                }

                return order.timestamp < d.ex_date_unix;
              });

            const ownedAtPayout = validOrdersOfFund.reduce((acc, order) => {
              acc += order.amount_changed;
              return acc;
            }, 0);

            const fundInfo = fundsStatus.find(
              (status) => status.isin === d.isin
            );

            return {
              ...d,
              amountPayout: d.amount * ownedAtPayout,
              instrumentInfo: fundInfo,
              ownedAtPayout,
            };
          });
      })
      .flat() ?? [];

  dividendsOfMonth.push(...fundDividends);

  timelineMonth.dividendsOfMonth = dividendsOfMonth.sort(
    (a, b) => a.payment_date_unix - b.payment_date_unix
  );

  timelineMonth.totalPayout = timelineMonth.dividendsOfMonth.reduce(
    (acc, value) => {
      acc += value.amountPayout;

      return acc;
    },
    0
  );

  dividendTimeline.push(timelineMonth);
}
---

<Layout title={`Dividenden-Ãœbersicht: ${name}`}>
  <main>
    <h1><a href={`/portfolio/${portfolioId}/detail`}>"{name}"</a></h1>
    <section>
      {
        dividendTimeline.map((month) => (
          <article>
            <h2>
              {months.get(month.month)} {month.year}
            </h2>
            <h3 style="margin-block: .75rem;">
              <span style="font-weight: 500;">
                {formatCurrency(month.totalPayout, "EUR", "de-DE")}
              </span>
              <spam>in {month.dividendsOfMonth.length} Auszahlungen</spam>
            </h3>
            <div class="stocks">
              {month.dividendsOfMonth.map((dividend) => (
                <div
                  class="stock"
                  class:list={[{ payed: isInPast(dividend.payment_date_unix) }]}
                >
                  <h3>
                    <a
                      style="display: inline-flex; align-items: center; gap: .5rem;"
                      href={`/portfolio/${id}/order/${dividend.instrumentInfo?.isin}`}
                    >
                      <img
                        src={getLogoUrl(
                          stocks.find(
                            (iterStock) =>
                              iterStock.isin === dividend.instrumentInfo?.isin
                          )!
                        )}
                        alt={`Logo ${dividend.instrumentInfo?.name}`}
                        width="35"
                        height="35"
                      />
                      <span class="payout">
                        {dividend.instrumentInfo?.name}
                      </span>
                      <div>
                        <span style="font-size: 1.25rem; font-weight: 500;">
                          {formatCurrency(
                            dividend.amountPayout,
                            "EUR",
                            "de-DE"
                          )}
                        </span>
                      </div>
                    </a>
                  </h3>
                  <div class="dividend-info">
                    <p>pro Aktie: {formatCurrency(dividend.amount)}</p>
                    <p>Bestand: {dividend.ownedAtPayout.toFixed(2)}</p>
                    <p>
                      Ex-Dividende am:
                      <br />
                      {new Date(dividend.ex_date_iso).toLocaleDateString()}
                    </p>
                    <p>
                      Auszahlung am:
                      <br />
                      {new Date(dividend.payment_date_iso).toLocaleDateString()}
                    </p>
                    <p>
                      Anteil:
                      {getPercentage(dividend.amountPayout, month.totalPayout)}
                    </p>
                    {dividend.info ? (
                      <p>
                        Info: <i>{dividend.info}</i>{" "}
                      </p>
                    ) : null}
                  </div>
                </div>
              ))}
            </div>
          </article>
        ))
      }
    </section>
  </main>
</Layout>

<style>
  article {
    & + article {
      margin-block-start: 1.5rem;
    }
  }

  .stocks {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .stock {
    flex-basis: 420px;
    border: 1px solid rgb(53, 53, 53);
    padding: 0.98rem 1rem;
    background-color: hsl(0, 0%, 4%);
    border-radius: 4px;
    transition: background-color 260ms ease-out, box-shadow 260ms ease-out;

    &:hover {
      background-color: hsl(0, 0%, 5%);
      box-shadow: 0 10px 12px -8px hsl(0, 0%, 4%);
    }

    &.payed {
      border-color: hsl(120, 100%, 23%);
    }
  }

  .payout {
    max-inline-size: 190px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .dividend-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }
</style>
