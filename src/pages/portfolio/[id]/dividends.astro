---
import { formatCurrency } from "../../../utils/intl";
import Layout from "../../../layouts/Layout.astro";
import { isInPast, months } from "../../../utils/date";
import { getPercentage } from "../../../utils/calculation";
import type {
  DividendOfMonth,
  DividendsMonthly,
  ExchangeRatesResponse,
  PortfolioDetailResponse,
} from "../../../types";
import { getLogoUrl } from "../../../utils/logos";
import { isFulfilled, isRejected } from "../../../utils/type-guards";

interface TimelineMonth {
  year: number;
  month: number;
  dividendsOfMonth: DividendsMonthly;
  totalPayout: number;
}

const { id } = Astro.params;

const SOURCE_TAX = 0.85;

const data = await Promise.allSettled([
  (
    await fetch(`${import.meta.env.VITE_URL_BASE}/api/portfolio/${id}/detail`)
  ).json(),
  (await fetch(`${import.meta.env.VITE_URL_BASE}/api/exchange-rates`)).json(),
]);

const rejectedReponses = data.filter(isRejected);
rejectedReponses.forEach((res) => {
  console.error(res.reason);
});

const fulfilledReponse = data.filter(isFulfilled).map((res) => res.value);
const [responsePortfolio, responseExchangeRates] = fulfilledReponse as [
  PortfolioDetailResponse,
  ExchangeRatesResponse,
];

const {
  data: {
    id: portfolioId,
    name,
    stocks,
    funds,
    stocksStatus,
    fundsStatus,
    orders,
  },
} = responsePortfolio;
const {
  data: { usd_eur },
} = responseExchangeRates;

const dividendTimeline: TimelineMonth[] = [];
const today = new Date();
const yearNow = today.getUTCFullYear();

const years = [yearNow, yearNow + 1];

for (let index = 0; index < years.length; index++) {
  const year = years[index];

  const startingMonth = 1;

  for (let i = startingMonth; i <= 12; i++) {
    const timelineMonth: {
      year: number;
      month: number;
      dividendsOfMonth: DividendsMonthly;
      totalPayout: number;
    } = {
      year,
      month: i,
      dividendsOfMonth: [],
      totalPayout: 0,
    };

    const dividendsOfMonth: DividendsMonthly = stocks
      .map((s) => {
        return s.dividends_stock
          .filter((d) => {
            return d.payment_date_iso.includes(
              `${year}-${i.toString().padStart(2, "0")}`,
            );
          })
          .map((d) => {
            const validOrdersOfStock = orders
              .filter((order) => order.isin === s.isin)
              .filter((order) => order.timestamp < d.ex_date_unix);

            const ownedAtPayout = validOrdersOfStock.reduce((acc, order) => {
              acc += order.amount_changed;
              return acc;
            }, 0);

            const stockInfo = stocksStatus.find(
              (status) => status.isin === d.isin,
            );

            return {
              ...d,
              type: "stock",
              amountPayout: d.amount * ownedAtPayout * SOURCE_TAX * usd_eur,
              instrumentInfo: stockInfo,
              ownedAtPayout,
            } as DividendOfMonth;
          });
      })
      .flat();

    const fundDividends =
      funds
        .map((f) => {
          return f.dividends_fund
            .filter((d) => {
              return d.payment_date_iso.includes(
                `${year}-${i.toString().padStart(2, "0")}`,
              );
            })
            .map((d) => {
              const validOrdersOfFund = orders
                .filter((order) => order.isin === f.isin)
                .filter((order) => {
                  if (order.timestamp > d.ex_date_unix) {
                    console.log(
                      "possibly exclude order: ",
                      order,
                      new Date(order.timestamp).toLocaleDateString(),
                    );
                    console.log("ex date: ", d.ex_date_iso);
                  }

                  return order.timestamp < d.ex_date_unix;
                });

              const ownedAtPayout = validOrdersOfFund.reduce((acc, order) => {
                acc += order.amount_changed;
                return acc;
              }, 0);

              const fundInfo = fundsStatus.find(
                (status) => status.isin === d.isin,
              );

              return {
                ...d,
                type: "fund",
                amountPayout: d.amount * ownedAtPayout,
                instrumentInfo: fundInfo,
                ownedAtPayout,
              } as DividendOfMonth;
            });
        })
        .flat() ?? [];

    dividendsOfMonth.push(...fundDividends);

    timelineMonth.dividendsOfMonth = dividendsOfMonth.sort(
      (a, b) => a.payment_date_unix - b.payment_date_unix,
    );

    timelineMonth.totalPayout = timelineMonth.dividendsOfMonth.reduce(
      (acc, value) => {
        acc += value.amountPayout;

        return acc;
      },
      0,
    );

    dividendTimeline.push(timelineMonth);
  }
}
---

<Layout title={`Dividenden-Übersicht: ${name}`}>
  <header>
    <nav>
      <a href="/portfolios/1">Portofolio-Übersicht</a>
    </nav>
  </header>
  <main>
    <h1><a href={`/portfolio/${portfolioId}/detail`}><q>{name}</q></a></h1>
    <section>
      {
        years.map((year) => {
          const monthsOfyear = dividendTimeline
            .filter((month) => month.year === year)
            .map((month) => (
              <>
                <article id={`payouts-${month.year}-${month.month}`}>
                  <h2>
                    {months.get(month.month)}&nbsp;{month.year}
                  </h2>
                  <h3 style="margin-block: .75rem;">
                    <span style="font-weight: 500;">
                      {formatCurrency(month.totalPayout, "EUR", "de-DE")}
                    </span>
                    <span>
                      in
                      {
                        month.dividendsOfMonth.filter(
                          (dividend) => dividend.amountPayout > 0,
                        ).length
                      }{" "}
                      Auszahlungen
                    </span>
                  </h3>
                  <div class="dividends">
                    {month.dividendsOfMonth
                      .filter((dividend) => dividend.amountPayout > 0)
                      .map((dividend) => (
                        <div
                          class="dividend"
                          class:list={[
                            { payed: isInPast(dividend.payment_date_unix) },
                          ]}
                        >
                          <h3>
                            <a
                              style="display: inline-flex; align-items: center; gap: .5rem;"
                              href={`/portfolio/${id}/order/${dividend.instrumentInfo?.isin}`}
                            >
                              <img
                                src={getLogoUrl(
                                  dividend.type === "stock"
                                    ? stocks.find(
                                        (iterStock) =>
                                          iterStock.isin ===
                                          dividend.instrumentInfo?.isin,
                                      )!
                                    : funds.find(
                                        (iterFund) =>
                                          iterFund.isin ===
                                          dividend.instrumentInfo?.isin,
                                      )!,
                                )}
                                alt={`Logo ${dividend.instrumentInfo?.name}`}
                                width="35"
                                height="35"
                                loading="lazy"
                              />
                              <span class="payout">
                                {dividend.instrumentInfo?.name}
                              </span>
                              <div>
                                <span style="font-size: 1.25rem; font-weight: 500;">
                                  {formatCurrency(
                                    dividend.amountPayout,
                                    "EUR",
                                    "de-DE",
                                  )}
                                </span>
                              </div>
                            </a>
                          </h3>
                          <div class="dividend-info">
                            <p>pro Aktie: {formatCurrency(dividend.amount)}</p>
                            <p>Bestand: {dividend.ownedAtPayout.toFixed(2)}</p>
                            <p>
                              Ex-Dividende am:
                              <br />
                              {new Date(
                                dividend.ex_date_iso,
                              ).toLocaleDateString()}
                            </p>
                            <p>
                              Auszahlung am:
                              <br />
                              {new Date(
                                dividend.payment_date_iso,
                              ).toLocaleDateString()}
                            </p>
                            <p>
                              Anteil:
                              {getPercentage(
                                dividend.amountPayout,
                                month.totalPayout,
                              )}
                            </p>
                            {dividend.info ? (
                              <p>
                                Info:{" "}
                                <i
                                  class:list={[
                                    dividend.info.includes("-")
                                      ? "reduction"
                                      : dividend.info.includes("%")
                                      ? "raise"
                                      : null,
                                  ]}
                                >
                                  {dividend.info}
                                </i>{" "}
                              </p>
                            ) : null}
                          </div>
                        </div>
                      ))}
                  </div>
                </article>
                {month.month === 12 ? <hr style="margin-block: 2rem;" /> : null}
              </>
            ));

          return (
            <>
              <h1>
                {year}{" "}
                <small>
                  {formatCurrency(
                    dividendTimeline
                      .filter((month) => month.year === year)
                      .reduce((acc, month) => {
                        acc = acc + month.totalPayout;

                        return acc;
                      }, 0),
                    "EUR",
                    "de-DE",
                  )}
                </small>
              </h1>
              {monthsOfyear}
            </>
          );
        })
      }
    </section>
  </main>
</Layout>

<script>
  document.addEventListener("astro:after-swap", () => {
    const today = new Date();
    const yearNow = today.getUTCFullYear();
    const currentMonth = today.getMonth() + 1;
    const scrollTarget = document.querySelector(
      `#payouts-${yearNow}-${currentMonth}`,
    );
    scrollTarget?.scrollIntoView({ behavior: "instant", block: "center" });
  });
</script>

<style>
  article {
    & + article {
      margin-block-start: 1.5rem;
    }
  }

  .dividends {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .dividend {
    flex-basis: 420px;
    border: 1px solid rgb(53, 53, 53);
    padding: 0.98rem 1rem;
    background-color: hsl(0, 0%, 4%);
    border-radius: 4px;
    transition:
      background-color 260ms ease-out,
      box-shadow 260ms ease-out;

    &:hover {
      background-color: hsl(0, 0%, 5%);
      box-shadow: 0 10px 12px -8px hsl(0, 0%, 4%);
    }

    &.payed {
      border-color: hsl(120, 100%, 23%);
    }
  }

  .payout {
    max-inline-size: 190px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  }

  .dividend-info {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .reduction {
    color: var(--red);
  }

  .raise {
    color: var(--green);
  }
</style>
