---
import PageNavigation from "../../../components/PageNavigation.astro";
import InstrumentItem from "../../../components/common/InstrumentItem.astro";
import Layout from "../../../layouts/Layout.astro";
import type { PortfolioDetailResponse } from "../../../types";
import { getValueOfPortfolio } from "../../../utils/calculation";
import { getLogoUrl } from "../../../utils/logos";

const { id } = Astro.params;

const { data } = (await (
  await fetch(`${import.meta.env.VITE_URL_BASE}/api/portfolio/${id}/detail`)
).json()) as PortfolioDetailResponse;

const { totalFundsValue, totalStocksValue, totalValue, totalValueRaw } =
  getValueOfPortfolio(data.stocksStatus, data.fundsStatus);
---

<Layout title={`Portfolio Detail: ${data.name}`}>
  <PageNavigation>
    <a href="/portfolios/1">Portofolio-Übersicht</a>
  </PageNavigation>
  <main>
    <h1 transition:name={data.name} transition:animate="initial">
      <q>{data.name}</q>
    </h1>
    <section>
      <h2>{totalValue}</h2>
      <div class="amounts">
        <h3>Aktien: {totalStocksValue}</h3>
        <h3>ETFs: {totalFundsValue}</h3>
      </div>
    </section>
    <a class="link-overview-dividends" href={`/portfolio/${id}/dividends`}
      >Zur Dividenden-Übersicht</a
    >
    <section class="investments">
      <h2 class="title-investments">Investments:</h2>

      <div class="grid">
        <ul class="investments-stocks">
          {
            data.stocksStatus
              .sort((a, b) => b.currentValue - a.currentValue)
              .map((stock) => (
                <InstrumentItem
                  portfolioId={id as string}
                  instrument={stock}
                  logoUrl={getLogoUrl(
                    data.stocks.find(
                      (iterStock) => iterStock.isin === stock.isin,
                    )!,
                  )}
                  totalPercentage={(stock.currentValue / totalValueRaw) * 100}
                />
              ))
          }
        </ul>
        <ul class="investments-funds">
          {
            data.fundsStatus
              .sort((a, b) => b.currentValue - a.currentValue)
              .map((fund) => (
                <InstrumentItem
                  portfolioId={id as string}
                  instrument={fund}
                  logoUrl={getLogoUrl(
                    data.funds.find((iterFund) => iterFund.isin === fund.isin)!,
                  )}
                  totalPercentage={(fund.currentValue / totalValueRaw) * 100}
                />
              ))
          }
        </ul>
      </div>
    </section>
  </main>
</Layout>

<style>
  .amounts {
    display: flex;
    gap: 1rem;
  }

  .link-overview-dividends {
    margin-block: 1rem;
    display: inline-block;

    &:hover {
      text-decoration: underline;
    }
  }

  .investments {
    .grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 5rem;

      @media screen and (min-width: 768px) {
        gap: initial;
        grid-template-columns: 1fr 1fr;
      }
    }
  }

  .investments-stocks {
    display: grid;
    gap: 1rem;

    @media screen and (min-width: 1440px) {
      grid-template-columns: 1fr 1fr;
    }
  }

  .title-investments {
    margin-bottom: 0.5rem;
  }

  ul {
    list-style: none;
    margin: 0;
    padding: 0;
  }
</style>
