---
import type {
  FundFullInfo,
  PortfolioDetailResponse,
  StockFullInfo,
} from "../../types";
import { getAmountInPortfolio } from "../../utils/calculation";
import { formatCurrency } from "../../utils/intl";

export interface Props {
  portfolioResponse: PortfolioDetailResponse;
  instrument: StockFullInfo | FundFullInfo;
  isInstrumentFromPortfolio: boolean;
}

const { portfolioResponse, isInstrumentFromPortfolio, instrument } =
  Astro.props;

const apiUrlBase = import.meta.env.VITE_URL_BASE;

const price = formatCurrency(instrument.price_snapshot!, "EUR", "de-DE");

const amount = isInstrumentFromPortfolio
  ? getAmountInPortfolio(portfolioResponse, instrument)
  : 0;
---

<order-instrument
  data-props={JSON.stringify({
    apiUrlBase,
    price: instrument.price_snapshot,
    isInstrumentFromPortfolio,
    portfolioId: portfolioResponse.data.id,
    isin: instrument.isin,
    name: instrument.name,
    instrumentType: instrument.type_id,
    currentAmount: Number(amount),
  })}
>
  <section class="order">
    <div class="price">
      <span>{price}</span>
      <label for="order-date" hidden>Tag der Order:</label>
      <input class="order-date" type="date" name="order-date" id="order-date" />
    </div>
    <form class="actions">
      <button
        class="btn-order btn-sell"
        type="button"
        disabled={!isInstrumentFromPortfolio}>Verkaufen</button
      >
      <input
        class="amount"
        type="number"
        name="order-amount"
        id="order-amount"
        min="0"
        placeholder="0"
        -
      />
      <button class="btn-order btn-buy" type="button">Kaufen</button>
    </form>
    <p class="amount-current">
      <span>Anzahl: {amount}</span>
      <span class="costs hidden"> </span>
    </p>
  </section>
</order-instrument>

<script>
  interface PropsClient {
    apiUrlBase: string;
    price: number;
    isInstrumentFromPortfolio: boolean;
    portfolioId: number;
    isin: string;
    name: string;
    instrumentType: "stock" | "fund";
    currentAmount: number;
  }

  interface OrderRequest {
    portfolioId: number;
    isin: string;
    name: string;
    amount: number;
    price: number;
    type: "buy" | "sell";
    instrumentType: "stock" | "fund";
    currentAmount?: number;
    isNew?: boolean;
    timestamp?: number;
  }

  class OrderInstrument extends HTMLElement {
    formatter = new Intl.NumberFormat("de-DE", {
      style: "currency",
      currency: "EUR",
    });

    constructor() {
      super();

      const props = JSON.parse(this.dataset.props as string) as PropsClient;
      const inputAmount = this.querySelector<HTMLInputElement>(".amount");
      const inputDate = this.querySelector<HTMLInputElement>(".order-date");
      const costsDisplay = this.querySelector<HTMLSpanElement>(".costs");
      const btnSell = this.querySelector<HTMLButtonElement>(".btn-sell");
      const btnBuy = this.querySelector<HTMLButtonElement>(".btn-buy");

      let amountValue = 0;
      let costs = 0;
      let orderDate: undefined | number = undefined;
      let loading = false;

      inputAmount?.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        amountValue = Number(target.value);

        // Disable sell button if amount to sell is larger then current amount
        if (
          amountValue > props.currentAmount &&
          props.isInstrumentFromPortfolio
        ) {
          btnSell!.disabled = true;
        } else if (!props.isInstrumentFromPortfolio) {
          btnSell!.disabled = true;
        } else {
          btnSell!.disabled = false;
        }

        if (amountValue > 0) {
          costsDisplay?.classList.remove("hidden");
          costs = props.price * amountValue;
          const costsFormated = this.formatter.format(costs);
          costsDisplay!.innerText = `| Kosten/Profit: ${costsFormated}`;
        } else {
          amountValue = 0;
          costs = 0;
          costsDisplay?.classList.add("hidden");
          costsDisplay!.innerText = `| Kosten/Profit: `;
        }
      });

      inputDate?.addEventListener("input", (e) => {
        const target = e.target as HTMLInputElement;
        orderDate = Number.isNaN(target.valueAsNumber)
          ? undefined
          : target.valueAsNumber;
      });

      btnBuy?.addEventListener("click", async (e) => {
        e.preventDefault();

        if (loading) {
          return;
        }

        if (amountValue <= 0) {
          console.log(`cant send: amount is invalid: ${amountValue}`);

          return;
        }

        loading = true;

        try {
          const orderRequest: OrderRequest = {
            portfolioId: props.portfolioId,
            isin: props.isin,
            name: props.name,
            instrumentType: props.instrumentType,
            type: "buy",
            price: props.price,
            amount: amountValue,
            isNew: !props.isInstrumentFromPortfolio,
            timestamp: orderDate,
          };

          const res = await fetch(`${props.apiUrlBase}/api/order/buy`, {
            method: "POST",
            body: JSON.stringify(orderRequest),
          });

          if (!res.ok) {
            console.log(res.status);
            console.log(res.statusText);

            return;
          }

          location.reload();
        } catch (error) {
          console.log((error as Error).message);
        } finally {
          loading = false;
        }
      });

      btnSell?.addEventListener("click", async (e) => {
        e.preventDefault();

        if (loading) {
          return;
        }

        if (
          (amountValue > props.currentAmount &&
            !props.isInstrumentFromPortfolio) ||
          amountValue <= 0
        ) {
          console.log(`cant send: amount is invalid: ${amountValue}`);
          return;
        }

        loading = true;

        try {
          const orderRequest: OrderRequest = {
            portfolioId: props.portfolioId,
            isin: props.isin,
            name: props.name,
            instrumentType: props.instrumentType,
            type: "sell",
            price: props.price,
            amount: amountValue,
            currentAmount: props.currentAmount,
          };

          const res = await fetch(`${props.apiUrlBase}/api/order/sell`, {
            method: "POST",
            body: JSON.stringify(orderRequest),
          });

          if (!res.ok) {
            console.log(res.status);
            console.log(res.statusText);

            return;
          }

          location.reload();
        } catch (error) {
          console.log((error as Error).message);
        } finally {
          loading = false;
        }
      });
    }
  }

  customElements.define("order-instrument", OrderInstrument);
</script>

<style>
  .order {
    color: hsl(0, 0, 5%);
    background-color: hsl(188, 90%, 11%);
    border-radius: 2px;
    padding: 0.55rem;
    margin-block: 0.35rem;
  }

  .price,
  .amount-current {
    text-align: center;
    padding-block-end: 0.5em;
    font-size: 1.15rem;
  }

  .price {
    :first-child {
      display: inline-block;
      margin-inline-end: 1rem;
    }
  }

  .amount-current {
    padding-block-start: 0.5em;
    padding-block-end: 0;
  }

  .actions {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
  }

  .btn-order {
    display: block;
    padding: 1rem;
    flex-grow: 1;
    font-size: 1rem;
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 0.5px;
  }

  .btn-sell {
    background-color: var(--red);
    border-start-start-radius: 2px;
    border-end-start-radius: 2px;
  }

  .btn-buy {
    background-color: var(--green);
    border-start-end-radius: 2px;
    border-end-end-radius: 2px;
  }

  .amount {
    border: none;
    background-color: #121212;
    font-size: 1.15rem;
    max-inline-size: 80px;
    text-align: center;
  }

  .hidden {
    display: none;
  }
</style>
